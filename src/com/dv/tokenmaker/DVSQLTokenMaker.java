/* The following code was generated by JFlex 1.6.0 */

/*
 * 02/15/2005
 *
 * SQLTokenMaker.java - Scanner for SQL.
 *
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package com.dv.tokenmaker;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;

/**
 * This class generates tokens representing a text stream as SQL.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated SQLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class DVSQLTokenMaker extends AbstractJFlexTokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int CHAR = 4;
    public static final int MLC = 6;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0,  0,  1,  1,  2,  2,  3, 3
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\4\1\1\1\21\1\21\1\21\22\0\1\4\1\0\1\61"+
                    "\4\0\1\62\2\15\1\13\1\11\1\0\1\12\1\17\1\14\1\3"+
                    "\1\53\1\53\1\3\1\50\3\3\1\51\1\3\1\16\1\0\1\10"+
                    "\1\7\1\6\1\0\1\60\1\22\1\42\1\33\1\23\1\20\1\47"+
                    "\1\52\1\44\1\37\1\54\1\56\1\24\1\40\1\27\1\35\1\45"+
                    "\1\57\1\26\1\32\1\25\1\34\1\41\1\43\1\46\1\30\1\2"+
                    "\1\63\1\0\1\64\1\0\1\5\1\0\1\22\1\42\1\33\1\23"+
                    "\1\20\1\47\1\52\1\44\1\37\1\54\1\56\1\24\1\40\1\27"+
                    "\1\35\1\45\1\57\1\26\1\32\1\25\1\34\1\41\1\43\1\46"+
                    "\1\30\1\2\12\0\1\21\252\0\2\36\115\0\1\31\u1ea8\0\1\21"+
                    "\1\21\u0100\0\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\4\0\1\1\1\2\1\1\1\3\1\4\5\5\1\6"+
                    "\1\1\1\7\33\1\1\10\1\11\1\12\1\13\1\14"+
                    "\1\15\1\13\1\16\1\17\1\13\1\20\1\13\1\0"+
                    "\1\21\1\22\4\1\2\23\6\1\1\0\3\1\1\0"+
                    "\6\1\1\0\2\1\1\0\4\1\10\0\15\1\1\0"+
                    "\3\1\2\23\4\1\2\23\2\0\1\23\4\1\1\0"+
                    "\3\1\1\23\1\1\1\0\1\1\1\0\10\1\1\0"+
                    "\4\1\1\0\5\1\1\0\1\1\1\0\1\24\1\13"+
                    "\1\25\1\7\1\0\1\1\1\0\2\1\1\26\1\1"+
                    "\1\0\3\1\1\0\5\1\1\0\3\1\1\0\1\1"+
                    "\1\0\3\1\1\0\2\1\1\0\1\1\11\0\17\1"+
                    "\1\0\1\1\1\0\5\1\1\0\1\23\2\0\1\1"+
                    "\1\23\4\1\1\23\2\1\1\23\1\0\1\23\1\1"+
                    "\1\0\5\1\1\0\1\1\1\0\1\1\1\0\1\1"+
                    "\1\0\4\1\1\0\3\1\2\0\1\1\1\0\3\1"+
                    "\1\23\2\1\2\0\2\1\1\23\1\1\1\0\3\1"+
                    "\1\26\2\23\1\1\1\0\1\1\11\0\11\1\1\0"+
                    "\4\1\1\23\1\0\4\1\1\0\1\1\4\0\7\1"+
                    "\2\0\4\1\1\0\1\1\1\0\4\1\1\0\1\1"+
                    "\1\0\1\1\1\0\4\1\2\0\3\1\1\0\1\1"+
                    "\1\23\1\0\1\1\1\0\3\1\1\0\1\23\4\0"+
                    "\1\1\1\23\5\1\1\0\3\1\1\23\4\1\1\0"+
                    "\1\1\1\23\1\1\1\0\3\1\1\0\3\1\1\0"+
                    "\1\1\1\0\1\1\1\23\1\0\1\1\1\0\1\1"+
                    "\1\0\1\1\1\0\2\1\2\0\2\1\3\0\2\1"+
                    "\1\0\2\1\4\0\4\1\1\0\3\1\1\0\1\1"+
                    "\1\0\2\1\1\0\1\1\1\0\1\1\2\0\1\1"+
                    "\1\0\1\1\2\0\2\1\2\0\2\1\1\0\2\1"+
                    "\2\0\5\1\2\23\1\0\2\1\1\0\1\1\1\0"+
                    "\1\1\1\0\2\23\2\0\2\1\2\0\4\1\1\0"+
                    "\2\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0"+
                    "\1\1\1\0\1\1\2\26\1\0\1\1\1\0\1\1"+
                    "\1\0\1\1\1\0";

    private static int [] zzUnpackAction() {
        int [] result = new int[521];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\65\0\152\0\237\0\324\0\324\0\u0109\0\u013e"+
                    "\0\u0173\0\u01a8\0\324\0\u01dd\0\u0212\0\u0247\0\324\0\u027c"+
                    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
                    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
                    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
                    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\324\0\324\0\u087d\0\u08b2"+
                    "\0\324\0\u08e7\0\u091c\0\324\0\u0951\0\u0986\0\324\0\u09bb"+
                    "\0\u09f0\0\u0a25\0\324\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
                    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
                    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
                    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
                    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
                    "\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376"+
                    "\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e"+
                    "\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u0109\0\u1627\0\u165c\0\u1691"+
                    "\0\u16c6\0\u16fb\0\324\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
                    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
                    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
                    "\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc"+
                    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
                    "\0\u1ed9\0\324\0\324\0\324\0\u1f0e\0\u1f0e\0\u1f43\0\u1f78"+
                    "\0\u1fad\0\u1fe2\0\u0109\0\u2017\0\u0b2e\0\u0b63\0\u204c\0\u2081"+
                    "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229"+
                    "\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1"+
                    "\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579"+
                    "\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721"+
                    "\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9"+
                    "\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71"+
                    "\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19"+
                    "\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1"+
                    "\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69"+
                    "\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111"+
                    "\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9"+
                    "\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461"+
                    "\0\u3496\0\u1977\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4"+
                    "\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\324"+
                    "\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef"+
                    "\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d\0\u3a62\0\u3a97"+
                    "\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f"+
                    "\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7"+
                    "\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f"+
                    "\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd\0\u4102\0\u4137"+
                    "\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa\0\u42df"+
                    "\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d\0\u4452\0\u4487"+
                    "\0\u44bc\0\u44f1\0\u4526\0\u455b\0\u4590\0\u45c5\0\u45fa\0\u462f"+
                    "\0\u4664\0\u4699\0\u46ce\0\u4703\0\u1e05\0\u4738\0\u476d\0\u47a2"+
                    "\0\u47d7\0\u480c\0\u4841\0\u4876\0\u1730\0\u48ab\0\u48e0\0\u4915"+
                    "\0\u494a\0\u497f\0\u0ee8\0\u49b4\0\u49e9\0\u4a1e\0\u4a53\0\u4a88"+
                    "\0\u4abd\0\u4af2\0\u4b27\0\u4b5c\0\u1553\0\u4b91\0\u4bc6\0\u2eca"+
                    "\0\u4bfb\0\u4c30\0\u4c65\0\u4487\0\u4c9a\0\u4ccf\0\u4d04\0\u4d39"+
                    "\0\u4d6e\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42\0\u4e77\0\u4eac\0\u4ee1"+
                    "\0\u4f16\0\u4f4b\0\u4f80\0\u4fb5\0\u4fea\0\u501f\0\u5054\0\u5089"+
                    "\0\u50be\0\u50f3\0\u5128\0\u515d\0\u5192\0\u51c7\0\u51fc\0\u5231"+
                    "\0\u5266\0\u529b\0\u52d0\0\u5305\0\u533a\0\u536f\0\u53a4\0\u53d9"+
                    "\0\u540e\0\u5443\0\u5478\0\u54ad\0\u54e2\0\u5517\0\u554c\0\u5581"+
                    "\0\u55b6\0\u55eb\0\u5620\0\u5655\0\u568a\0\u56bf\0\u56f4\0\u5729"+
                    "\0\u575e\0\u5793\0\u57c8\0\u57fd\0\u5832\0\u5867\0\u589c\0\u58d1"+
                    "\0\u5906\0\u593b\0\u5970\0\u59a5\0\u59da\0\u5a0f\0\u5a44\0\u5a79"+
                    "\0\u5aae\0\u5ae3\0\u5b18\0\u5b4d\0\u5b82\0\u5bb7\0\u5bec\0\u5c21"+
                    "\0\u5c56\0\u5c8b\0\u5cc0\0\u5cf5\0\u5d2a\0\u5d5f\0\u5d94\0\u5dc9"+
                    "\0\u5dfe\0\u5e33\0\u5e68\0\u5e9d\0\u5ed2\0\u5f07\0\u5f3c\0\u5f71"+
                    "\0\u5fa6\0\u5fdb\0\u6010\0\u6045\0\u607a\0\u60af\0\u60e4\0\u6119"+
                    "\0\u614e\0\u6183\0\u61b8\0\u61ed\0\u6222\0\u6257\0\u628c\0\u62c1"+
                    "\0\u62f6\0\u632b\0\u6360\0\u6395\0\u63ca\0\u63ff\0\u6434\0\u6469"+
                    "\0\u649e\0\u64d3\0\u6508\0\u653d\0\u6572\0\u65a7\0\u65dc\0\u6611"+
                    "\0\u6646";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[521];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
                    "\1\14\1\13\1\15\1\13\1\16\1\17\1\20\1\21"+
                    "\1\22\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
                    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
                    "\1\41\1\42\1\43\1\44\1\45\1\46\1\7\1\47"+
                    "\2\10\1\50\1\10\1\51\1\52\1\53\1\7\1\54"+
                    "\1\55\1\56\1\57\1\5\1\60\1\61\57\60\1\62"+
                    "\3\60\1\63\1\64\60\63\1\65\2\63\1\66\1\67"+
                    "\11\66\1\70\51\66\67\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\10\0\1\10\13\0\1\21\1\71\27\0\2\10"+
                    "\1\0\1\10\15\0\1\11\67\0\1\13\63\0\2\13"+
                    "\67\0\1\72\65\0\1\73\53\0\1\7\15\0\1\7"+
                    "\1\0\7\7\1\0\4\7\1\0\11\7\2\0\1\7"+
                    "\1\0\1\7\1\0\2\7\10\0\1\21\14\0\1\71"+
                    "\27\0\2\21\1\0\1\21\13\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\7\7"+
                    "\1\74\6\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\1\7\1\75\1\76\2\7\1\77"+
                    "\1\7\1\100\1\101\1\7\1\102\1\7\1\0\2\7"+
                    "\1\103\13\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\104\1\0\1\105\3\7\1\106\2\7\1\0"+
                    "\3\7\1\107\1\110\1\111\15\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\112\1\0\7\7\1\0"+
                    "\3\7\1\113\1\114\1\115\15\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\116\1\0\1\117\3\7"+
                    "\1\120\1\7\1\121\1\0\3\7\1\122\1\123\1\124"+
                    "\15\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\125\1\0\7\7\1\0\4\7\1\126\1\127\15\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\2\7\1\130\1\131\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\132"+
                    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\25\0\1\133\4\0\1\134\2\0\1\135\3\0\1\136"+
                    "\1\137\2\140\1\141\3\0\1\142\22\0\2\7\1\0"+
                    "\1\7\12\0\1\143\1\0\3\7\1\144\2\7\1\145"+
                    "\1\0\2\7\1\146\1\147\1\140\1\150\1\151\3\7"+
                    "\1\152\10\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\4\7\1\153\2\7\1\0\2\7"+
                    "\1\154\1\155\1\0\5\7\1\156\10\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
                    "\1\157\1\7\1\160\1\161\3\7\1\0\6\7\1\162"+
                    "\7\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\2\7\1\163\1\7\1\164\1\165\1\7"+
                    "\1\0\1\7\1\166\1\167\1\7\1\0\4\7\1\170"+
                    "\1\7\1\171\7\7\1\0\2\7\34\0\1\172\1\0"+
                    "\2\173\5\0\1\174\11\0\1\175\14\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\5\7\1\176\1\7\1\173"+
                    "\1\165\3\7\1\0\1\7\1\122\11\7\1\177\2\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\200"+
                    "\1\0\1\201\6\7\1\0\3\7\1\202\1\203\1\204"+
                    "\15\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\1\205\6\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\206"+
                    "\1\0\6\7\1\207\1\0\3\7\1\210\1\211\1\212"+
                    "\15\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\213\1\214\4\7"+
                    "\1\215\10\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\216\1\0\1\217\6\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\220\1\0\1\221\3\7\1\222\2\7\1\0\3\7"+
                    "\1\223\1\224\1\225\15\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\2\7\1\226\1\7"+
                    "\1\227\2\7\1\0\3\7\1\230\1\231\1\232\15\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\233"+
                    "\1\0\4\7\1\234\2\7\1\0\2\7\1\235\1\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\3\7\1\236\1\0"+
                    "\16\7\1\0\2\7\25\0\1\237\46\0\2\7\1\0"+
                    "\1\7\12\0\1\240\1\0\7\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\30\0\1\241\41\0\64\57\1\242"+
                    "\1\60\1\0\57\60\1\0\3\60\61\0\1\243\3\0"+
                    "\1\63\1\0\60\63\1\0\2\63\62\0\1\243\2\0"+
                    "\1\66\1\0\11\66\1\0\51\66\14\0\1\244\53\0"+
                    "\1\245\5\0\2\246\35\0\2\245\1\0\1\245\11\0"+
                    "\1\72\1\0\17\72\1\0\43\72\2\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\3\7\1\247\3\7\1\0"+
                    "\4\7\1\250\1\251\15\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\1\7\1\165\5\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\2\7\1\165\1\161"+
                    "\3\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\1\7\1\165"+
                    "\4\7\1\165\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\40\0\1\173\33\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\1\7\1\165\2\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\3\7\1\252\3\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\1\165\6\7\1\0\4\7\1\0\13\7\1\253"+
                    "\2\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\2\7\1\254\4\7\1\255\1\256\3\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\3\7\1\257\3\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\3\7\1\122\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\2\7\1\260\1\7\1\0"+
                    "\16\7\1\0\2\7\36\0\2\261\34\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\261\1\262\3\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\2\7"+
                    "\1\263\5\7\1\131\5\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\5\7\1\264\1\7"+
                    "\1\0\4\7\1\0\4\7\1\265\6\7\1\266\2\7"+
                    "\1\0\2\7\62\0\2\267\10\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\16\7"+
                    "\1\267\1\270\1\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\7\7\1\131"+
                    "\6\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\3\7\1\271"+
                    "\12\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\1\272\6\7\1\0\4\7\1\273\1\274"+
                    "\15\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\6\7\1\270"+
                    "\7\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\6\7\1\165"+
                    "\7\7\1\0\2\7\45\0\1\275\26\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
                    "\1\7\1\276\14\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\1\277\6\7\1\0\4\7"+
                    "\1\0\10\7\1\300\5\7\1\0\2\7\57\0\1\301"+
                    "\14\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\4\7\1\0\13\7\1\302\2\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
                    "\1\277\4\7\1\0\4\7\1\0\1\7\1\303\14\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\3\7\1\165\3\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\304\1\305\3\7\1\0\16\7\1\0"+
                    "\2\7\31\0\1\306\1\173\3\0\2\307\55\0\1\310"+
                    "\2\0\1\311\67\0\2\312\72\0\1\173\1\0\1\313"+
                    "\62\0\1\267\53\0\1\314\57\0\1\315\77\0\1\316"+
                    "\31\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
                    "\1\317\1\165\3\7\1\307\1\320\3\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\1\7\1\321\2\7\1\322\2\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\312\1\323\3\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\1\7\1\165"+
                    "\1\7\1\324\12\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
                    "\1\7\1\270\14\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\5\7\1\325\1\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\1\326\6\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\3\7\1\327\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\330\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\4\7\1\331\2\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\2\7\1\332\2\7\1\333\1\7\1\0\2\7\1\334"+
                    "\1\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\1\335\6\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\336\1\337"+
                    "\15\7\1\0\2\7\25\0\1\340\46\0\2\7\1\0"+
                    "\1\7\12\0\1\341\1\0\7\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\1\7\1\330\5\7\1\0\4\7\1\0"+
                    "\6\7\1\265\7\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\342\1\0\7\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\1\7\1\161\5\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\3\7\1\343\3\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\3\7\1\161\3\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\5\7\1\344\1\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\3\7\1\345\3\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\30\0\1\346\1\0\1\347\1\0"+
                    "\1\160\1\0\2\350\77\0\1\173\46\0\1\351\37\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\1\7\1\352"+
                    "\1\7\1\353\1\7\1\161\1\7\1\350\1\354\3\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\5\7\1\355\1\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\1\7"+
                    "\1\356\14\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\7\7"+
                    "\1\165\6\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\1\7\1\165\3\7\1\53\1\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\34\0\1\173"+
                    "\37\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
                    "\1\165\1\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
                    "\1\357\1\7\1\360\2\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\3\7\1\361\3\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\3\7\1\270\3\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\3\7\1\362\1\0\16\7\1\0"+
                    "\2\7\32\0\1\363\1\0\1\364\37\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\3\7\1\365\1\7\1\366"+
                    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\32\0"+
                    "\1\367\41\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\3\7\1\370\3\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\371\1\0"+
                    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\2\7\1\372"+
                    "\4\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\4\7\1\0\2\7\1\322\13\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\4\7\1\373"+
                    "\2\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\4\7\1\374"+
                    "\2\7\1\375\1\376\3\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\4\7\1\377\1\u0100\15\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\u0101"+
                    "\1\u0102\3\7\1\0\16\7\1\0\2\7\46\0\1\u0103"+
                    "\25\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\4\7\1\0\2\7\1\u0104\13\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\3\7\1\u0105\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\3\7\1\u0106\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\4\7\1\u0107\2\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\34\0\1\u0108"+
                    "\37\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
                    "\1\u0109\1\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
                    "\1\u010a\1\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\3\7\1\u010b\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\4\7\1\u010c\1\75\15\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\203\1\204\15\7\1\0\2\7\35\0\1\173\36\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\6\7\1\165"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\27\0\1\u010d"+
                    "\45\0\1\245\44\0\2\245\1\0\1\245\13\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\4\7\1\u010e\2\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\36\0\2\u010f"+
                    "\34\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\u010f\1\u0110\3\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\3\7\1\u0111\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\u0112\1\0\7\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\u0113\1\0\1\u0114\6\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\3\7\1\u0115"+
                    "\12\7\1\0\2\7\27\0\1\u0116\2\0\1\u0117\41\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\1\u0118\2\7"+
                    "\1\u0119\3\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\277\1\0\7\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\0\13\7\1\u011a\2\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\u011b\1\0\7\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\u011c\1\u011d"+
                    "\15\7\1\0\2\7\25\0\1\173\46\0\2\7\1\0"+
                    "\1\7\12\0\1\165\1\0\7\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\2\7\1\u011e\4\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\5\7\1\u011f\1\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\45\0\1\u0120\26\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
                    "\1\7\1\253\14\7\1\0\2\7\25\0\1\u0121\46\0"+
                    "\2\7\1\0\1\7\12\0\1\u0122\1\0\7\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\2\7\1\165\4\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\u0123\1\0\7\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\51\0\1\u0124\22\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
                    "\5\7\1\131\10\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\u0125\1\0\7\7\1\0\4\7\1\0"+
                    "\3\7\1\161\12\7\1\0\2\7\34\0\1\u0126\37\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\5\7\1\356"+
                    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\25\0"+
                    "\1\u0127\75\0\2\u0128\52\0\1\u0129\102\0\2\u012a\52\0"+
                    "\1\u012b\70\0\2\u012c\104\0\1\u012d\36\0\1\u012e\66\0"+
                    "\1\u0124\14\0\1\u0120\23\0\2\7\1\0\1\7\12\0"+
                    "\1\u012f\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\7\7\1\u0128\1\u0130\3\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\u0131\1\0\7\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\u012a\1\u0132\15\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\3\7\1\u0133\3\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\u012c\1\u0134\3\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\13\7"+
                    "\1\u0115\2\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\2\7\1\u0135\4\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\4\7\1\131\2\7\1\0\4\7"+
                    "\1\0\4\7\1\253\11\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\1\u0112\6\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\4\7\1\u0136\2\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\2\7\1\u0137"+
                    "\1\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\u0138\1\u0139\1\u013a"+
                    "\2\7\1\0\2\7\1\u013b\13\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\5\7\1\u013c"+
                    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\4\7\1\u013d"+
                    "\2\7\1\0\4\7\1\0\16\7\1\0\2\7\42\0"+
                    "\1\203\21\0\1\u013e\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\3\7\1\204\1\0\16\7"+
                    "\1\0\1\7\1\u013f\33\0\1\173\40\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\4\7\1\165\2\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\3\7\1\u0140"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\u0141\1\0\7\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\u0142"+
                    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\4\7\1\u0143\1\u0144\15\7\1\0\2\7\25\0"+
                    "\1\u0145\64\0\1\u0146\14\0\1\173\47\0\1\u0147\101\0"+
                    "\1\u0148\31\0\2\7\1\0\1\7\12\0\1\201\1\0"+
                    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\u0149\1\0\7\7\1\0"+
                    "\3\7\1\165\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\u014a\1\0\7\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\3\7\1\371\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\3\7\1\165\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\2\7\1\u014b\1\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\1\7\1\u014c\2\7\1\0\3\7"+
                    "\1\u014d\2\7\1\165\7\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\0\4\7\1\u014e\11\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\2\7\1\u014f\4\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\12\0\1\u0150"+
                    "\101\0\1\u0151\44\0\2\7\1\0\1\u0152\12\0\1\7"+
                    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\1\u0153"+
                    "\6\7\1\0\4\7\1\0\16\7\1\0\2\7\51\0"+
                    "\1\173\22\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\7\7\1\0\4\7\1\0\5\7\1\165\10\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\4\7\1\270\2\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\7\7\1\0\4\7\1\0\6\7\1\253\7\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\7\7\1\0\1\7\1\u0154\2\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\1\u0155\6\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\36\0\2\u0156\34\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\u0156\1\u0157\3\7\1\0\16\7\1\0"+
                    "\2\7\45\0\1\364\26\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\1\7\1\366"+
                    "\14\7\1\0\2\7\43\0\2\u0158\27\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\u0158"+
                    "\1\u0159\15\7\1\0\2\7\42\0\1\u0124\31\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\3\7"+
                    "\1\131\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\1\u015a\6\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\1\7"+
                    "\1\165\14\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\u015b\1\0\7\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\30\0\1\u0120\43\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\1\7\1\253\5\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\u015c\1\0\7\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\2\7\1\122\1\7\1\0\16\7"+
                    "\1\0\2\7\30\0\1\173\66\0\1\u015d\41\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\1\u015e\6\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\32\0\1\u015f\41\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\3\7\1\u0160"+
                    "\3\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\4\7\1\u0161\1\u0162\15\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\3\7\1\u0163\3\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\0\2\7\1\u0164\1\u0165\12\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\2\7\1\270"+
                    "\4\7\1\0\4\7\1\0\16\7\1\0\2\7\31\0"+
                    "\1\u0166\76\0\2\u0167\27\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\2\7\1\u0168\4\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\u0167\1\u0169\15\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\3\7\1\u016a\3\7\1\0\4\7\1\0\3\7"+
                    "\1\u014d\12\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\4\7\1\253\2\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\40\0\1\u016b\33\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\1\7"+
                    "\1\u016c\2\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\u016d\1\0\7\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\u016e\1\u016f\3\7\1\0"+
                    "\16\7\1\0\2\7\36\0\2\u0170\34\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\u0170\1\u0171\3\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\4\7\1\u0172\2\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\32\0\1\173\41\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\4\7\1\u0173\2\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\42\0\1\173"+
                    "\62\0\1\u0124\67\0\2\u0174\66\0\1\u0175\52\0\1\u0176"+
                    "\55\0\1\u0177\71\0\1\u0178\63\0\1\267\64\0\1\u0179"+
                    "\42\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\1\7\1\131\2\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\4\7\1\u0174\1\u017a\15\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\4\7\1\0\2\7\1\u017b\13\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\5\7\1\u017c"+
                    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\u017d\1\0\7\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\3\7\1\u017e\3\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\2\7\1\u017f\4\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\u0180\1\0\7\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\1\7\1\204"+
                    "\14\7\1\0\2\7\32\0\1\u0181\41\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\3\7\1\u0182\3\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\1\u0183\6\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\u0184\1\0\7\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\3\7\1\u0185\3\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\u0152\12\0\1\7"+
                    "\1\0\1\u0186\6\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\41\0\1\267\32\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\2\7\1\270\1\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\3\7\1\u0187"+
                    "\12\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\3\7\1\u0188\3\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\4\7\1\u0189\2\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\42\0\1\203\31\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\3\7\1\204"+
                    "\1\0\16\7\1\0\2\7\53\0\1\173\70\0\1\u018a"+
                    "\40\0\1\u0124\64\0\1\267\40\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\13\7"+
                    "\1\u018b\2\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\4\7\1\131\2\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\u018c\1\0\7\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\4\7\1\0\5\7\1\u018d\10\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\4\7\1\u018e\1\u018f\15\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\u0190\1\0"+
                    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\u0191\1\0\7\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\31\0\1\u0192\66\0"+
                    "\1\237\40\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\2\7\1\u0193\4\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\4\7\1\240\2\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\u0194\1\0"+
                    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\4\7\1\0\1\7\1\u0195\14\7\1\0\2\7\50\0"+
                    "\1\u0196\23\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\7\7\1\0\4\7\1\0\4\7\1\u0197\11\7\1\0"+
                    "\2\7\32\0\1\u0198\41\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\3\7\1\u0199\3\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\3\7\1\u019a\3\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\u019b\1\u019c\15\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\4\7\1\u016c\2\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\27\0\1\u019d\44\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\1\7\1\u019e\2\7"+
                    "\1\0\16\7\1\0\2\7\36\0\2\173\34\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\173\1\165"+
                    "\3\7\1\0\16\7\1\0\2\7\34\0\1\u019f\37\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\5\7\1\u01a0"+
                    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\4\7\1\137\1\147\15\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\u01a1\1\u01a2\15\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\1\u01a3\6\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\31\0\1\u01a4\67\0\1\u01a5"+
                    "\37\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
                    "\1\u01a6\4\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
                    "\1\u01a7\1\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\116\1\0\7\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\27\0\1\u01a8"+
                    "\44\0\2\7\1\0\1\7\12\0\1\7\1\0\1\277"+
                    "\6\7\1\0\4\7\1\0\16\7\1\0\2\7\31\0"+
                    "\1\u01a9\22\0\1\u01aa\17\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\2\7\1\u01ab\4\7\1\0\4\7\1\0"+
                    "\10\7\1\u01ac\5\7\1\0\2\7\32\0\1\u01ad\41\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\3\7\1\u01ae"+
                    "\3\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\u01af\1\0\7\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\255"+
                    "\1\256\15\7\1\0\2\7\42\0\1\u01b0\101\0\1\173"+
                    "\52\0\1\u01b1\52\0\1\u01b2\74\0\2\u01b3\27\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\3\7"+
                    "\1\u01b4\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
                    "\13\7\1\165\2\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
                    "\1\7\1\u01b5\14\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\4\7\1\u01b6\2\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\u01b3"+
                    "\1\u0194\15\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\5\7\1\u01b7\1\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\33\0\1\u01b8\40\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\4\7\1\u01b9\2\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\3\7\1\u01ba\3\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\4\7\1\u019e\2\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\1\7"+
                    "\1\167\2\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\0\15\7\1\317\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\1\u01bb\6\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\25\0\1\u01bc\46\0\2\7"+
                    "\1\0\1\7\12\0\1\u01bd\1\0\7\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\1\341\6\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\34\0\1\364\37\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\5\7\1\366\1\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\204\1\0\7\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\7\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\1\204\6\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\25\0\1\u01be\46\0\2\7\1\0\1\7"+
                    "\12\0\1\u01bf\1\0\7\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\5\7\1\131\1\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\u01c0"+
                    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\42\0\1\u01c1\31\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\3\7\1\u01c2\1\0\16\7\1\0"+
                    "\2\7\43\0\2\u01c3\27\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\u01c3\1\u01c4\15\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\4\7\1\0\11\7\2\165\3\7"+
                    "\1\0\2\7\57\0\1\203\14\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\13\7"+
                    "\1\204\2\7\1\0\2\7\46\0\1\u01c5\25\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\3\7\1\253\3\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\40\0\1\u01c6"+
                    "\33\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\1\7\1\u01c7\2\7\1\0\16\7\1\0\2\7"+
                    "\25\0\1\u01c8\46\0\2\7\1\0\1\7\12\0\1\u01c9"+
                    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\267\1\270\3\7\1\0\16\7\1\0\2\7\42\0"+
                    "\1\u01ca\62\0\1\u01cb\33\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\3\7\1\u01cc\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\1\7\1\u01cd\2\7\1\0\16\7"+
                    "\1\0\2\7\31\0\1\173\62\0\1\u01ce\77\0\1\u01cf"+
                    "\31\0\2\7\1\0\1\7\12\0\1\7\1\0\1\u01d0"+
                    "\6\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\3\7\1\u01d1\1\0\16\7\1\0\2\7\27\0\1\u01d2"+
                    "\44\0\2\7\1\0\1\7\12\0\1\7\1\0\1\u01d3"+
                    "\6\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\5\7\1\u01d4"+
                    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\34\0"+
                    "\1\u01b1\42\0\1\u01d5\115\0\2\u01d6\54\0\1\u0124\37\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\5\7\1\u01b5"+
                    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\u01d7\12\0\1\7\1\0\7\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\u01d6"+
                    "\1\u01d8\15\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\3\7\1\u01d9\3\7\1\0\1\7"+
                    "\1\240\2\7\1\0\16\7\1\0\2\7\27\0\1\u0179"+
                    "\44\0\2\7\1\0\1\7\12\0\1\7\1\0\1\u017f"+
                    "\6\7\1\0\4\7\1\0\16\7\1\0\2\7\7\0"+
                    "\2\7\1\0\1\7\12\0\1\u01da\1\0\7\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\1\7\1\u01db"+
                    "\2\7\1\0\16\7\1\0\2\7\33\0\1\u01dc\40\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\4\7\1\u01dd"+
                    "\2\7\1\0\4\7\1\0\16\7\1\0\2\7\34\0"+
                    "\1\u01de\37\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\5\7\1\u01df\1\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\3\7\1\u01e0\3\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\33\0\1\u010c\40\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\4\7\1\75\2\7\1\0\4\7\1\0"+
                    "\16\7\1\0\2\7\42\0\1\u01e1\31\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\3\7\1\u01e2"+
                    "\1\0\16\7\1\0\2\7\43\0\2\u01a1\53\0\1\u01e3"+
                    "\40\0\2\7\1\0\1\7\12\0\1\7\1\0\4\7"+
                    "\1\u01e4\2\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\50\0\1\u01e5\23\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\4\7\1\0\4\7\1\265\11\7"+
                    "\1\0\2\7\50\0\1\173\46\0\1\u01e6\41\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\0\4\7\1\165\11\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\3\7\1\u01e7\3\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\32\0\1\u01e8"+
                    "\65\0\1\u01e9\40\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\3\7\1\u01ea\3\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\7\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\4\7\1\u0106\2\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\45\0\1\174\26\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\1\7"+
                    "\1\122\14\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\0\1\7\1\u01eb\2\7"+
                    "\1\0\16\7\1\0\2\7\41\0\1\u01ec\57\0\1\u01ed"+
                    "\37\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
                    "\1\0\2\7\1\u01ee\1\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
                    "\1\u01ef\1\7\1\0\4\7\1\0\16\7\1\0\2\7"+
                    "\7\0\2\7\1\0\1\u01f0\12\0\1\7\1\0\7\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\5\7\1\u01ab\1\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\1\7"+
                    "\1\u01f1\2\7\1\0\16\7\1\0\2\7\55\0\1\173"+
                    "\2\0\1\173\13\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\7\7\1\0\4\7\1\0\11\7\1\165\2\7"+
                    "\1\165\1\7\1\0\2\7\57\0\1\u01f2\14\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
                    "\1\0\13\7\1\u01f3\2\7\1\0\2\7\7\0\2\7"+
                    "\1\0\1\7\12\0\1\u01f4\1\0\7\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\34\0\1\u0120\37\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\5\7\1\253\1\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\25\0\1\u01f5"+
                    "\46\0\2\7\1\0\1\7\12\0\1\u01f6\1\0\7\7"+
                    "\1\0\4\7\1\0\16\7\1\0\2\7\25\0\1\u01f7"+
                    "\72\0\1\u01a4\40\0\2\7\1\0\1\7\12\0\1\7"+
                    "\1\0\4\7\1\u01a6\2\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\25\0\1\u0120\104\0\1\173\26\0\2\7"+
                    "\1\0\1\7\12\0\1\253\1\0\7\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\u0160\1\0\7\7\1\0\4\7\1\0\16\7"+
                    "\1\0\2\7\36\0\2\u01e5\104\0\1\u0120\14\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\7\7\1\u01e5\1\265"+
                    "\3\7\1\0\16\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
                    "\13\7\1\253\2\7\1\0\2\7\7\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\1\7\1\u01ab\1\7\1\u01f8"+
                    "\3\7\1\0\2\7\1\u01ee\1\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\u01f9\1\0"+
                    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\32\0"+
                    "\1\u01fa\41\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\3\7\1\u01fb\3\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\7\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\4\7\1\u0160\2\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\45\0\1\u01fc\26\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\0\4\7\1\0\1\7\1\u0154"+
                    "\14\7\1\0\2\7\33\0\1\u0120\40\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\u01fd"+
                    "\1\u01fe\15\7\1\0\2\7\7\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\7\7\1\u015f\1\u0160\3\7\1\0"+
                    "\16\7\1\0\2\7\51\0\1\u0120\22\0\2\7\1\0"+
                    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
                    "\5\7\1\253\10\7\1\0\2\7\25\0\1\u01b3\104\0"+
                    "\1\u01ff\26\0\2\7\1\0\1\7\12\0\1\7\1\0"+
                    "\7\7\1\0\4\7\1\0\1\7\1\u0200\14\7\1\0"+
                    "\2\7\25\0\1\u0201\46\0\2\7\1\0\1\7\12\0"+
                    "\1\u0202\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
                    "\2\7\36\0\2\u0203\34\0\2\7\1\0\1\7\12\0"+
                    "\1\7\1\0\7\7\1\u0203\1\u0204\3\7\1\0\16\7"+
                    "\1\0\2\7\32\0\1\u0205\41\0\2\7\1\0\1\7"+
                    "\12\0\1\7\1\0\3\7\1\u0206\3\7\1\0\4\7"+
                    "\1\0\16\7\1\0\2\7\27\0\1\u0207\44\0\2\7"+
                    "\1\0\1\7\12\0\1\7\1\0\1\u0208\6\7\1\0"+
                    "\4\7\1\0\16\7\1\0\2\7\45\0\1\u0209\26\0"+
                    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
                    "\4\7\1\0\1\7\1\372\14\7\1\0\2\7\52\0"+
                    "\1\u0120\17\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[26235];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\4\0\2\11\4\1\1\11\3\1\1\11\35\1\2\11"+
                    "\2\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
                    "\1\1\1\11\14\1\1\0\3\1\1\0\6\1\1\0"+
                    "\2\1\1\0\4\1\10\0\15\1\1\0\12\1\1\11"+
                    "\2\0\5\1\1\0\5\1\1\0\1\1\1\0\10\1"+
                    "\1\0\4\1\1\0\5\1\1\0\1\1\1\0\3\11"+
                    "\1\1\1\0\1\1\1\0\4\1\1\0\3\1\1\0"+
                    "\5\1\1\0\3\1\1\0\1\1\1\0\3\1\1\0"+
                    "\2\1\1\0\1\1\11\0\17\1\1\0\1\1\1\0"+
                    "\5\1\1\0\1\1\2\0\12\1\1\0\2\1\1\0"+
                    "\5\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
                    "\4\1\1\0\3\1\2\0\1\1\1\0\6\1\2\0"+
                    "\4\1\1\0\3\1\1\11\3\1\1\0\1\1\11\0"+
                    "\11\1\1\0\5\1\1\0\4\1\1\0\1\1\4\0"+
                    "\7\1\2\0\4\1\1\0\1\1\1\0\4\1\1\0"+
                    "\1\1\1\0\1\1\1\0\4\1\2\0\3\1\1\0"+
                    "\2\1\1\0\1\1\1\0\3\1\1\0\1\1\4\0"+
                    "\7\1\1\0\10\1\1\0\3\1\1\0\3\1\1\0"+
                    "\3\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
                    "\1\1\1\0\1\1\1\0\2\1\2\0\2\1\3\0"+
                    "\2\1\1\0\2\1\4\0\4\1\1\0\3\1\1\0"+
                    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\2\0"+
                    "\1\1\1\0\1\1\2\0\2\1\2\0\2\1\1\0"+
                    "\2\1\2\0\7\1\1\0\2\1\1\0\1\1\1\0"+
                    "\1\1\1\0\2\1\2\0\2\1\2\0\4\1\1\0"+
                    "\2\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0"+
                    "\1\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
                    "\1\1\1\0";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[521];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

  /* user code: */


    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public DVSQLTokenMaker() {
        super();
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start,end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }


    /**
     * Returns the text to place at the beginning and end of a
     * line to "comment" it in a this programming language.
     *
     * @return The start and end strings to add to a line to "comment"
     *         it out.
     */
    public String[] getLineCommentStartAndEnd() {
        return new String[] { "--", null };
    }


    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     *        <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
            case Token.LITERAL_STRING_DOUBLE_QUOTE:
                state = STRING;
                start = text.offset;
                break;
            case Token.LITERAL_CHAR:
                state = CHAR;
                start = text.offset;
                break;
            case Token.COMMENT_MULTILINE:
                state = MLC;
                start = text.offset;
                break;
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
//            return new TokenImpl();
            return null;
        }

    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     */
//    private boolean zzRefill() {
//        return zzCurrentPos>=s.offset+s.count;
//    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
//    public final void yyreset(java.io.Reader reader) {
//        // 's' has been updated.
//        zzBuffer = s.array;
//		/*
//		 * We replaced the line below with the two below it because zzRefill
//		 * no longer "refills" the buffer (since the way we do it, it's always
//		 * "full" the first time through, since it points to the segment's
//		 * array).  So, we assign zzEndRead here.
//		 */
//        //zzStartRead = zzEndRead = s.offset;
//        zzStartRead = s.offset;
//        zzEndRead = zzStartRead + s.count - 1;
//        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
//        zzLexicalState = YYINITIAL;
//        zzReader = reader;
//        zzAtBOL  = true;
//        zzAtEOF  = false;
//    }




    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public DVSQLTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 240) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

      /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) { /* possibly more input available */
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1:
                { addToken(Token.IDENTIFIER);
                }
                case 23: break;
                case 2:
                { addNullToken(); return firstToken;
                }
                case 24: break;
                case 3:
                { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 25: break;
                case 4:
                { addToken(Token.WHITESPACE);
                }
                case 26: break;
                case 5:
                { addToken(Token.OPERATOR);
                }
                case 27: break;
                case 6:
                { addToken(Token.SEPARATOR);
                }
                case 28: break;
                case 7:
                { addToken(Token.LITERAL_NUMBER_FLOAT);
                }
                case 29: break;
                case 8:
                { start = zzMarkedPos-1; yybegin(STRING);
                }
                case 30: break;
                case 9:
                { start = zzMarkedPos-1; yybegin(CHAR);
                }
                case 31: break;
                case 10:
                { addToken(Token.ERROR_IDENTIFIER); addNullToken(); return firstToken;
                }
                case 32: break;
                case 11:
                {
                }
                case 33: break;
                case 12:
                { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
                }
                case 34: break;
                case 13:
                { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 35: break;
                case 14:
                { addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
                }
                case 36: break;
                case 15:
                { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR);
                }
                case 37: break;
                case 16:
                { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
                }
                case 38: break;
                case 17:
                { addToken(Token.COMMENT_EOL);
                }
                case 39: break;
                case 18:
                { start = zzMarkedPos-2; yybegin(MLC);
                }
                case 40: break;
                case 19:
                { addToken(Token.RESERVED_WORD);
                }
                case 41: break;
                case 20:
                { addToken(Token.PREPROCESSOR);
                }
                case 42: break;
                case 21:
                { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
                }
                case 43: break;
                case 22:
                { addToken(Token.FUNCTION);
                }
                case 44: break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case YYINITIAL: {
                                addNullToken(); return firstToken;
                            }
                            case 522: break;
                            case STRING: {
                                addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
                            }
                            case 523: break;
                            case CHAR: {
                                addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
                            }
                            case 524: break;
                            case MLC: {
                                addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
                            }
                            case 525: break;
                            default:
                                return null;
                        }
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
